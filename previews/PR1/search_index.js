var documenterSearchIndex = {"docs":
[{"location":"pages/overview/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"On this page, we give an overview of the DiffFusion.jl modelling framework.","category":"page"},{"location":"pages/overview/#What-Is-the-Purpose-of-the-Framework?","page":"Overview","title":"What Is the Purpose of the Framework?","text":"","category":"section"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Scenario-based financial instrument pricing is at the core of most risk management processes and methods. The DiffFusion.jl modelling framework provides a flexible and computationally efficient simulation and pricing engine. It contains state-of-the art model implementations that go beyond what is available in many similar open source and proprietary systems.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"The framework is designed for regular large-scale portfolio simulations as well as ad-hoc and interactive pricing and risk calculation analysis. As such, the framework can be used in production processes as well for benchmarking and model validation purposes. ","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"DiffFusion.jl is decomposed into the following components:","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"scenario generation,\nscenario-based financial instrument pricing and sensitivity calculation, as well as\nscenario-based risk measure calculation.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"The components can be used independently. However, they develop their full potential when combined together. ","category":"page"},{"location":"pages/overview/#Scenario-Generation","page":"Overview","title":"Scenario Generation","text":"","category":"section"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Scenario generation is based on Monte Carlo simulation of risk factors. Risk factors are represented by generic model state variables. The evolution of the model state variables is based on diffusion models.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"The diffusion models in the DiffFusion.jl framework represent market standard risk neutral valuation models. For details on the specific models, see the model section. A key objective of the framework is flexibility regarding the choice model. For example, you can combine multi-factor rates models for major currencies with single-factor rates models for other currencies.  ","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Component models for e.g. interest rates, exchange rates and equities are combined into a cross-asset hybrid model. The joint evolution of the hybrid model state variables is then calculated by Monte Carlo simulation.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"The Monte Carlo method in the DiffFusion.jl framework uses bias-free simulation of random variables whenever the model allows for. This approach provides flexibility on the chosen time grid and allows simulating long time-horizons without sacrificing simulation accuracy. Random numbers are drawn from efficient pseudo-random number generators or low-discrepancy sequences.","category":"page"},{"location":"pages/overview/#Financial-Instrument-Pricing-and-Sensitivity-Calculation","page":"Overview","title":"Financial Instrument Pricing and Sensitivity Calculation","text":"","category":"section"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Financial instruments in the DiffFusion.jl framework are represented as a layered composition of payoffs, cash flows and cash flow legs. Each layer adds a level of abstraction and common functionality. Cash flow legs are finally combined into products and portfolios.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"The layered design of portfolios and products allows for a very flexible extendability of the framework for new products and feature. Exotic products can easily be integrated since payoffs and payoff-scripting are integral functionalities by design.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Portfolios and products are agnostic to the simulation model and Monte Carlo method. The link between model, simulation and market data is established via a separate entity that holds the context details. This feature also contributes to the flexibility and extendability of the framework. ","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Future risk-neutral prices of portfolios and products are calculated using the simulated state variables and the corresponding models. We implement analytical pricing methods whenever available and appropriate. American Monte-Carlo methods are available for complex products.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Sensitivities of future prices are calculated efficiently using Algorithmic Differentiation (AD) methods. AD methods are directly available in the Julia language. For more details on AD in Julia, see the Julia setion. ","category":"page"},{"location":"pages/overview/#Risk-Measure-Calculation","page":"Overview","title":"Risk Measure Calculation","text":"","category":"section"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Scenario prices for portfolios and products are stored in a three-dimensional scenario cube. The axes of the cube are simulated scenarios, future observation times and individual product legs. With these data we calculate risk measures like expected exposure and potential future exposure. New risk measures can easily be added to the framework. Alternatively, scenario cubes can also be processed by client applications or directly by the user.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Portfolio risk measures need to take into account collateralization. We model collateral directly based on relevant CSA parameters like threshold, minimum transfer amount and independent amount. Collateralized portfolios are modelled using a margin period of risk. The methodology allows for an accurate portfolio modelling. In particular, we can model exposure spikes following large payments.","category":"page"},{"location":"pages/overview/#What-Models-and-Products-Are-Covered?","page":"Overview","title":"What Models and Products Are Covered?","text":"","category":"section"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"The DiffFusion.jl framework covers models for interest rates, exchange rates. Further asset classes like equities/indices, inflation, commodity futures, and credit spreads will be added. All models can be combined into hybrid models for joint simulation.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Financial products are composed of cash flows. Cash flows for linear products are directly available in the framework. New cash flow types can easily be added.","category":"page"},{"location":"pages/overview/#Component-Models","page":"Overview","title":"Component Models","text":"","category":"section"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"We make extensive use of the Heath-Jarrow-Morton (HJM) framework for the component models. This approach yields most analytical tractability for simulation, pricing and model calibration. More complex model variants can be easily added to the framework.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Interest rates are modelled as multi-factor Gaussian HJM models. Such models allow for a rich set of simulated yield curves involving curve shifts, slopes and curvatures. The models can be calibration to the full surface of at-the-money swaptions. In its single-factor form, the model reduces to the classical Hull-White interest rate model.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Exchange rates are modelled in a classical Black-Scholes-type model. Exchange rate models are linked to the corresponding domestic and foreign interest rate models. Calibration of the models takes into account the joint evolution of exchange rates as well as corresponding interest rates.","category":"page"},{"location":"pages/overview/#Cash-Flows-and-Legs","page":"Overview","title":"Cash Flows and Legs","text":"","category":"section"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"The DiffFusion.jl framework already includes standard fixed income and interest rate cash flows for principal payments, fixed rates and floating rates.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Linear FX and cross currency instruments are covered by the interest rate cash flows and exchange rate conversion. Additional principal payments in mark-to-market cross currency swaps are handled by a specific leg type.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Further cash flow typed and leg types will be added going forward.","category":"page"},{"location":"pages/overview/#Why-Do-We-Use-Julia-Language?","page":"Overview","title":"Why Do We Use Julia Language?","text":"","category":"section"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Risk factor simulation and scenario-based financial instrument pricing are computationally expensive calculations. Efficient implementation of such calculations requires fast compiled machine code, ability to parallelize and distribute calculations as well as support for high-performance computing hardware like GPU. The Julia language natively fulfills all these requirements.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Development in Julia language is lightweight and similar to languages like Python. As a result, new functionalities can easily be added within the framework or attached by client applications or user interaction.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"Sensitivity calculation is critical for risk management processes. For exposure simulations, sensitivity calculations can be particularly challenging from a computational perspective. These challenges are addressed by Automatic Differentiation (AD) methods. Julia language supports forward mode and reverse mode AD via operator overloading and source transformation. We leverage these language features and provide efficient and accurate Delta and Vega calculations.","category":"page"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"The DiffFusion.jl framework can be incorporated as package in Julia application and user code. Furthermore, the framework can be used e.g. in Jupyter notebooks, Python code and R code via Julia's interfaces to these environments. The DiffFusion.jl framework can also run fully independent, e.g. in a Docker container.","category":"page"},{"location":"pages/overview/#Related-Literature-and-References","page":"Overview","title":"Related Literature and References","text":"","category":"section"},{"location":"pages/overview/","page":"Overview","title":"Overview","text":"L. Andersen, V. Piterbarg. Interest Rate Modeling. 2010.\nR. Jarrow, Y. Yildirim. Pricing Treasury Inflation Protected Securities and Related Derivatives Using an Hjm Model. 2003.\nL. Andersen. Markov Models for Commodity Futures: Theory and Practice. 2008.\nA. Green. XVA. 2016.\nL. Andersen, M. Pykhtin, A. Sokol. Rethinking Margin Period of Risk. 2016.\nThe Julia Programming Language\nPyJulia - a Python interface to the Julia language\nJuliaCall - an R interface to the Julia language","category":"page"},{"location":"models/models/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"models/models/","page":"Models","title":"Models","text":"In this section we document models for various risk factors.","category":"page"},{"location":"examples/examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/examples/","page":"Examples","title":"Examples","text":"In this section we document data and functions to work with the product and model examples.","category":"page"},{"location":"payoffs/payoffs/#Payoffs","page":"Payoffs","title":"Payoffs","text":"","category":"section"},{"location":"payoffs/payoffs/","page":"Payoffs","title":"Payoffs","text":"In this section we document the payoff scripting framework.","category":"page"},{"location":"analytics/analytics/#Analytics","page":"Analytics","title":"Analytics","text":"","category":"section"},{"location":"analytics/analytics/","page":"Analytics","title":"Analytics","text":"In this section we document methods for instrument pricing, exposure and collateral simulation.","category":"page"},{"location":"paths/paths/#Paths","page":"Paths","title":"Paths","text":"","category":"section"},{"location":"paths/paths/","page":"Paths","title":"Paths","text":"In this section we document data structures and methods for path setup.","category":"page"},{"location":"serialisation/serialisation/#Serialisation","page":"Serialisation","title":"Serialisation","text":"","category":"section"},{"location":"serialisation/serialisation/","page":"Serialisation","title":"Serialisation","text":"In this section we document methods for serialising and de-serialising objects.","category":"page"},{"location":"simulations/simulations/#Simulations","page":"Simulations","title":"Simulations","text":"","category":"section"},{"location":"simulations/simulations/","page":"Simulations","title":"Simulations","text":"In this section we document data structures and methods for Monte Carlo  simulation and path setup.","category":"page"},{"location":"termstructures/termstructures/#Term-Structures","page":"Term Structures","title":"Term Structures","text":"","category":"section"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"In this section we document term structures.","category":"page"},{"location":"termstructures/termstructures/#Term-Structure-Types-and-Methods","page":"Term Structures","title":"Term Structure Types and Methods","text":"","category":"section"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.Termstructure","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.Termstructure","page":"Term Structures","title":"DiffFusion.Termstructure","text":"abstract type Termstructure end\n\nAn abstract term structure that provides an alias for identification.\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.alias(ts::DiffFusion.Termstructure)","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.alias-Tuple{DiffFusion.Termstructure}","page":"Term Structures","title":"DiffFusion.alias","text":"alias(ts::Termstructure)\n\nReturn the term structure's alias.\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.TermstructureResultSize","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.TermstructureResultSize","page":"Term Structures","title":"DiffFusion.TermstructureResultSize","text":"@enum(\n    TermstructureResultSize,\n    TermstructureVector,\n    TermstructureScalar\n)\n\nSpecify the dimensions/shape of the values modelled by a term structure.\n\nFor some term structures (e.g. ParameterTermstructure and VolatilityTermstructure) the result may be either a vector or a scalar.\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/#CorrelationTermstructure","page":"Term Structures","title":"CorrelationTermstructure","text":"","category":"section"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.CorrelationTermstructure","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.CorrelationTermstructure","page":"Term Structures","title":"DiffFusion.CorrelationTermstructure","text":"abstract type CorrelationTermstructure <: Termstructure end\n\nAn abstract correlation term structure that provides methods to calculate instantaneous correlations.\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"Call operator for CorrelationTermstructure is defined as","category":"page"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"(ts::CorrelationTermstructure)(args...) = correlation(ts, args...)","category":"page"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.correlation(\n    ts::DiffFusion.CorrelationTermstructure,\n    alias1::String,\n    alias2::String,\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.correlation-Tuple{DiffFusion.CorrelationTermstructure, String, String}","page":"Term Structures","title":"DiffFusion.correlation","text":"correlation(ts::CorrelationTermstructure, alias1::String, alias2::String)\n\nReturn a scalar instantaneous correlation.\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.DiffFusion.correlation(\n    ts::DiffFusion.CorrelationTermstructure,\n    aliases::AbstractVector{String},\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.correlation-Tuple{DiffFusion.CorrelationTermstructure, AbstractVector{String}}","page":"Term Structures","title":"DiffFusion.correlation","text":"correlation(ts::CorrelationTermstructure, aliases::AbstractVector{String})\n\nReturn a symmetric matrix of instantaneous correlations.\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.correlation(\n    ts::DiffFusion.CorrelationTermstructure,\n    aliases1::AbstractVector{String},\n    aliases2::AbstractVector{String},\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.correlation-Tuple{DiffFusion.CorrelationTermstructure, AbstractVector{String}, AbstractVector{String}}","page":"Term Structures","title":"DiffFusion.correlation","text":"correlation(ts::CorrelationTermstructure, aliases1::AbstractVector{String}, aliases2::AbstractVector{String})\n\nReturn a matrix of instantaneous correlations, each element of aliases1 versus each element of aliases2. The size of the resulting matrix is (length(aliases1), length(aliases2)).\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.correlation(\n    ts::DiffFusion.CorrelationTermstructure,\n    alias1::String,\n    aliases2::AbstractVector{String},\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.correlation-Tuple{DiffFusion.CorrelationTermstructure, String, AbstractVector{String}}","page":"Term Structures","title":"DiffFusion.correlation","text":"correlation(ts::CorrelationTermstructure, alias1::String, aliases2::AbstractVector{String})\n\nReturn an (1,N) matrix of instantaneous correlations.\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.correlation(\n    ts::DiffFusion.CorrelationTermstructure,\n    aliases1::AbstractVector{String},\n    alias2::String,\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.correlation-Tuple{DiffFusion.CorrelationTermstructure, AbstractVector{String}, String}","page":"Term Structures","title":"DiffFusion.correlation","text":"correlation(ts::CorrelationTermstructure, aliases1::AbstractVector{String}, alias2::String)\n\nReturn an (N, 1) matrix of instantaneous correlations.\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/#CreditDefaultTermstructure","page":"Term Structures","title":"CreditDefaultTermstructure","text":"","category":"section"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.CreditDefaultTermstructure","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.CreditDefaultTermstructure","page":"Term Structures","title":"DiffFusion.CreditDefaultTermstructure","text":"abstract type CreditDefaultTermstructure <: Termstructure end\n\nAn abstract credit default term structure that provides methods to calculate survival probabilities.\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"Call operator for CreditDefaultTermstructure is defined as","category":"page"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"(ts::CreditDefaultTermstructure)(args...) = survival(ts, args...)","category":"page"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.survival(\n    ts::DiffFusion.CreditDefaultTermstructure,\n    t::ModelTime,\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.survival-Tuple{DiffFusion.CreditDefaultTermstructure, Number}","page":"Term Structures","title":"DiffFusion.survival","text":"survival(ts::CreditDefaultTermstructure, t::ModelTime)\n\nReturn the survival probability with observation time t.\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/#FuturesTermstructure","page":"Term Structures","title":"FuturesTermstructure","text":"","category":"section"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.FuturesTermstructure","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.FuturesTermstructure","page":"Term Structures","title":"DiffFusion.FuturesTermstructure","text":"abstract type FuturesTermstructure <: Termstructure end\n\nAn abstract futures term structure that provides methods to calculate prices of futures. Such prices represent risk-neutral expectations of spot prices.\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"Call operator for FuturesTermstructure is defined as","category":"page"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"(ts::FuturesTermstructure)(args...) = future_price(ts, args...)","category":"page"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.future_price(\n    ts::DiffFusion.FuturesTermstructure,\n    t::ModelTime,\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.future_price-Tuple{DiffFusion.FuturesTermstructure, Number}","page":"Term Structures","title":"DiffFusion.future_price","text":"future_price(ts::FuturesTermstructure, t::ModelTime)\n\nReturn the price of a future with settlement time t.\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/#InflationTermstructure","page":"Term Structures","title":"InflationTermstructure","text":"","category":"section"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.InflationTermstructure","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.InflationTermstructure","page":"Term Structures","title":"DiffFusion.InflationTermstructure","text":"abstract type InflationTermstructure <: Termstructure end\n\nAn abstract inflation term structure that provides methods to calculate forward inflation index. Forward inflation index is a T-forward measure expectation of (spot) inflation index values.\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"Call operator for InflationTermstructure is defined as","category":"page"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"(ts::InflationTermstructure)(args...) = inflation_index(ts, args...)","category":"page"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.inflation_index(\n    ts::DiffFusion.InflationTermstructure,\n    t::ModelTime,\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.inflation_index-Tuple{DiffFusion.InflationTermstructure, Number}","page":"Term Structures","title":"DiffFusion.inflation_index","text":"inflation_index(ts::InflationTermstructure, t::ModelTime)\n\nReturn the forward inflation index with observation time t.\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/#ParameterTermstructure","page":"Term Structures","title":"ParameterTermstructure","text":"","category":"section"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.ParameterTermstructure","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.ParameterTermstructure","page":"Term Structures","title":"DiffFusion.ParameterTermstructure","text":"abstract type ParameterTermstructure <: Termstructure end\n\nAn abstract generic parameter term structure that provides methods to retrieve parameter values for various incarnations of signatures.\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"Call operator for ParameterTermstructure is defined as","category":"page"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"(ts::ParameterTermstructure)(args...) = value(ts, args...)","category":"page"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.value(\n    ts::DiffFusion.ParameterTermstructure,\n    result_size::DiffFusion.TermstructureResultSize = DiffFusion.TermstructureVector,\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.value","page":"Term Structures","title":"DiffFusion.value","text":"value(ts::ParameterTermstructure, result_size::TermstructureResultSize = TermstructureVector)\n\nReturn a value for constant/time-homogeneous parameters.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.value(\n    ts::DiffFusion.ParameterTermstructure,\n    t::ModelTime,\n    result_size::DiffFusion.TermstructureResultSize = DiffFusion.TermstructureVector,\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.value-2","page":"Term Structures","title":"DiffFusion.value","text":"value(ts::ParameterTermstructure, t::ModelTime, result_size::TermstructureResultSize = TermstructureVector)\n\nReturn a value for a given observation time t.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/#YieldTermstructure","page":"Term Structures","title":"YieldTermstructure","text":"","category":"section"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.YieldTermstructure","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.YieldTermstructure","page":"Term Structures","title":"DiffFusion.YieldTermstructure","text":"abstract type YieldTermstructure <: Termstructure end\n\nAn abstract yield term structure that provides methods to calculate discount factors zero rates and forward rates.\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"Call operator for YieldTermstructure is defined as","category":"page"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"(ts::YieldTermstructure)(args...) = discount(ts, args...)","category":"page"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.discount(\n    ts::DiffFusion.YieldTermstructure,\n    t::ModelTime,\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.discount-Tuple{DiffFusion.YieldTermstructure, Number}","page":"Term Structures","title":"DiffFusion.discount","text":"discount(ts::YieldTermstructure, t::ModelTime)\n\nReturn the discount factor with observation time t.\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.zero_rate(\n    ts::DiffFusion.YieldTermstructure,\n    t0::ModelTime,\n    t1::ModelTime,\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.zero_rate-Tuple{DiffFusion.YieldTermstructure, Number, Number}","page":"Term Structures","title":"DiffFusion.zero_rate","text":"zero_rate(ts::YieldTermstructure, t0::ModelTime, t1::ModelTime)\n\nReturn the continuous compounded zero rate over a period t0 to t1.\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.zero_rate(\n    ts::DiffFusion.YieldTermstructure,\n    t::ModelTime,\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.zero_rate-Tuple{DiffFusion.YieldTermstructure, Number}","page":"Term Structures","title":"DiffFusion.zero_rate","text":"zero_rate(ts::YieldTermstructure, t::ModelTime)\n\nReturn the continuous compounded zero rate as of today with observation time t.\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.forward_rate(\n    ts::DiffFusion.YieldTermstructure,\n    t::ModelTime,\n    dt=1.0e-6,\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.forward_rate","page":"Term Structures","title":"DiffFusion.forward_rate","text":"forward_rate(ts::YieldTermstructure, t::ModelTime, dt=1.0e-6)\n\nReturn the instantaneous forward rate with observation time t.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/#VolatilityTermstructure","page":"Term Structures","title":"VolatilityTermstructure","text":"","category":"section"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.VolatilityTermstructure","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.VolatilityTermstructure","page":"Term Structures","title":"DiffFusion.VolatilityTermstructure","text":"abstract type VolatilityTermstructure <: Termstructure end\n\nAn abstract volatility term structure that provides methods to calculate volatility values for various incarnations of signatures.\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"Call operator for VolatilityTermstructure is defined as","category":"page"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"(ts::VolatilityTermstructure)(args...) = volatility(ts, args...)","category":"page"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.volatility(\n    ts::DiffFusion.VolatilityTermstructure,\n    t::ModelTime,\n    result_size::DiffFusion.TermstructureResultSize = DiffFusion.TermstructureVector,\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.volatility","page":"Term Structures","title":"DiffFusion.volatility","text":"volatility(ts::VolatilityTermstructure, t::ModelTime, result_size::TermstructureResultSize = TermstructureVector)\n\nReturn a volatility for a given observation time t.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.volatility(\n    ts::DiffFusion.VolatilityTermstructure,\n    t::ModelTime,\n    x::ModelValue,\n    )","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.volatility-Tuple{DiffFusion.VolatilityTermstructure, Number, Number}","page":"Term Structures","title":"DiffFusion.volatility","text":"volatility(ts::VolatilityTermstructure, t::ModelTime, x::ModelValue)\n\nReturn a scalar volatility for a given observation time t and underlying or strike value x.\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/#Correlation-Term-Structures","page":"Term Structures","title":"Correlation Term Structures","text":"","category":"section"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.CorrelationHolder","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.CorrelationHolder","page":"Term Structures","title":"DiffFusion.CorrelationHolder","text":"struct CorrelationHolder <: CorrelationTermstructure\n    alias::String\n    correlations::Dict\n    sep::String\nend\n\nA container holding correlation values.\n\nA CorrelationHolder allows to calculate correlation matrices based on String alias keys (identifiers).\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.correlation_holder","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.correlation_holder","page":"Term Structures","title":"DiffFusion.correlation_holder","text":"correlation_holder(\n    alias::String,\n    sep = \"<>\",\n    )\n\nCreate an empty CorrelationHolder object.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.correlation_key","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.correlation_key","page":"Term Structures","title":"DiffFusion.correlation_key","text":"correlation_key(ch::CorrelationHolder, alias1::String, alias2::String)\n\nDerive the key for correlation dictionary from two aliases.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.set_correlation!","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.set_correlation!","page":"Term Structures","title":"DiffFusion.set_correlation!","text":"set_correlation!(\n    ch::CorrelationHolder,\n    alias1::String,\n    alias2::String,\n    value::ModelValue\n    )\n\nInsert a new correlation value into CorrelationHolder. If a correlation already exists it is overwritten.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.get","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.get","page":"Term Structures","title":"DiffFusion.get","text":"get(ch::CorrelationHolder, alias1::String, alias2::String)\n\nImplement methodology to obtain a scalar correlation from a CorrelationHolder.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/#Parameter-Term-Structures","page":"Term Structures","title":"Parameter Term Structures","text":"","category":"section"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.PiecewiseFlatParameter","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.PiecewiseFlatParameter","page":"Term Structures","title":"DiffFusion.PiecewiseFlatParameter","text":"abstract type PiecewiseFlatParameter <: ParameterTermstructure end\n\nA generic vector-valued model parameter term structure with piece-wise constant interpolation and constant extrapolation.\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.BackwardFlatParameter","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.BackwardFlatParameter","page":"Term Structures","title":"DiffFusion.BackwardFlatParameter","text":"struct BackwardFlatParameter <: PiecewiseFlatParameter\n    alias::String\n    times::AbstractVector\n    values::AbstractMatrix\nend\n\nA generic vector-valued model parameter term structure with piece-wise constant backward-flat interpolation and constant extrapolation.\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.backward_flat_parameter","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.backward_flat_parameter","page":"Term Structures","title":"DiffFusion.backward_flat_parameter","text":"backward_flat_parameter(\n     alias::String,\n     times::AbstractVector,\n     values::AbstractMatrix,\n     )\n\nCreate a BackwardFlatParameter object for vector-valued parameters.\n\n\n\n\n\nbackward_flat_parameter(\n    alias::String,\n    times::AbstractVector,\n    values::AbstractVector,\n    )\n\nCreate a BackwardFlatParameter object for scalar parameters.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.flat_parameter","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.flat_parameter","page":"Term Structures","title":"DiffFusion.flat_parameter","text":"flat_parameter(value::ModelValue)\n\nCreate a constant BackwardFlatParameter object.\n\n\n\n\n\nflat_parameter(alias::String, value::ModelValue)\n\nCreate a constant BackwardFlatParameter object.\n\n\n\n\n\nflat_parameter(value::AbstractVector)\n\nCreate a constant BackwardFlatParameter object.\n\n\n\n\n\nflat_parameter(alias::String, value::AbstractVector)\n\nCreate a constant BackwardFlatParameter object.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.ForwardFlatParameter","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.ForwardFlatParameter","page":"Term Structures","title":"DiffFusion.ForwardFlatParameter","text":"struct ForwardFlatParameter <: PiecewiseFlatParameter\n    alias::String\n    times::AbstractVector\n    values::AbstractMatrix\nend\n\nA generic vector-valued model parameter term structure with piece-wise constant forward-flat interpolation and constant extrapolation.\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.forward_flat_parameter","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.forward_flat_parameter","page":"Term Structures","title":"DiffFusion.forward_flat_parameter","text":"forward_flat_parameter(\n    alias::String,\n    times::AbstractVector,\n    values::AbstractMatrix,\n    )\n\nCreate a ForwardFlatParameter object for vector-valued parameters.\n\n\n\n\n\nforward_flat_parameter(\n    alias::String,\n    times::AbstractVector,\n    values::AbstractVector,\n    )\n\nCreate a ForwardFlatParameter object for scalar parameters.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.time_idx(ts::DiffFusion.BackwardFlatParameter, t)","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.time_idx-Tuple{DiffFusion.BackwardFlatParameter, Any}","page":"Term Structures","title":"DiffFusion.time_idx","text":"time_idx(ts::BackwardFlatParameter, t)\n\nFind the index such that T[idx-1] < t <= T[idx]. If t is larger than the last (or all) times T then return length(T)+1.\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.time_idx(ts::DiffFusion.ForwardFlatParameter, t)","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.time_idx-Tuple{DiffFusion.ForwardFlatParameter, Any}","page":"Term Structures","title":"DiffFusion.time_idx","text":"time_idx(ts::ForwardFlatParameter, t)\n\nFind the index such that T[idx] >= t > T[idx+1]. If t is smaller than the first (or all) times T then return 0.\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/#Yield-Term-Structures","page":"Term Structures","title":"Yield Term Structures","text":"","category":"section"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.FlatForward","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.FlatForward","page":"Term Structures","title":"DiffFusion.FlatForward","text":"struct FlatForward <: YieldTermstructure\n    alias::String\n    rate\nend\n\nA constant yield term structure.\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.flat_forward","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.flat_forward","page":"Term Structures","title":"DiffFusion.flat_forward","text":"flat_forward(alias::String, rate)\n\nCreate a FlatForward yield curve.\n\n\n\n\n\nflat_forward(rate)\n\nCreate a FlatForward yield curve without alias.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.ZeroCurve","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.ZeroCurve","page":"Term Structures","title":"DiffFusion.ZeroCurve","text":"struct ZeroCurve <: YieldTermstructure\n    alias::String\n    times::AbstractVector\n    values::AbstractVector\n    interpolation\nend\n\nA yield term structure based on interpolated continuous compounded zero rates.\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.zero_curve","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.zero_curve","page":"Term Structures","title":"DiffFusion.zero_curve","text":"zero_curve(\n    alias::String,\n    times::AbstractVector,\n    values::AbstractVector,\n    interp_method = (x,y) -> linear_interpolation(x, y, extrapolation_bc = Line()),\n    )\n\nCreate a ZeroCurve object.\n\n\n\n\n\nzero_curve(\n    times::AbstractVector,\n    values::AbstractVector,\n    interp_method = (x,y) -> linear_interpolation(x, y, extrapolation_bc = Line()),\n    )\n\nCreate a ZeroCurve object without alias.\n\n\n\n\n\nzero_curve(\n    alias::String,\n    times::AbstractVector,\n    values::AbstractVector,\n    method_alias::String,\n    )\n\nCreate a ZeroCurve object using interpolation string.\n\n\n\n\n\nzero_curve(\n    times::AbstractVector,\n    values::AbstractVector,\n    method_alias::String,\n    )\n\nCreate a ZeroCurve object using interpolation string.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/#Volatility-Term-Structures","page":"Term Structures","title":"Volatility Term Structures","text":"","category":"section"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.BackwardFlatVolatility","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.BackwardFlatVolatility","page":"Term Structures","title":"DiffFusion.BackwardFlatVolatility","text":"struct BackwardFlatVolatility <: VolatilityTermstructure\n    alias::String\n    times::AbstractVector\n    values::AbstractMatrix\nend\n\nA vector-valued volatility term structure with piece-wise constant (backward-flat) interpolation and constant extrapolation.\n\n\n\n\n\n","category":"type"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.backward_flat_volatility","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.backward_flat_volatility","page":"Term Structures","title":"DiffFusion.backward_flat_volatility","text":"backward_flat_volatility(\n    alias::String,\n    times::AbstractVector,\n    values::AbstractMatrix,\n    )\n\nCreate a BackwardFlatVolatility object for vector-valued volatility.\n\nVolatility values are of size (nvols, ntimes).\n\n\n\n\n\nbackward_flat_volatility(\n    alias::String,\n    times::AbstractVector,\n    values::AbstractVector,\n    )\n\nCreate a BackwardFlatVolatility object for scalar volatility.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.flat_volatility","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.flat_volatility","page":"Term Structures","title":"DiffFusion.flat_volatility","text":"flat_volatility(alias::String, value)\n\nCreate a BackwardFlatVolatility object for a flat volatility.\n\n\n\n\n\nflat_volatility(alias::String, value)\n\nCreate a BackwardFlatVolatility object for a flat volatility.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.time_idx(ts::DiffFusion.BackwardFlatVolatility, t)","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.time_idx-Tuple{DiffFusion.BackwardFlatVolatility, Any}","page":"Term Structures","title":"DiffFusion.time_idx","text":"time_idx(ts::BackwardFlatVolatility, t)\n\nFind the index such that T[idx-1] < t <= T[idx]. If t is larger than the last (or all) times T then return length(T)+1.\n\n\n\n\n\n","category":"method"},{"location":"termstructures/termstructures/#Common-Methods-Overview","page":"Term Structures","title":"Common Methods Overview","text":"","category":"section"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.correlation","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.correlation","page":"Term Structures","title":"DiffFusion.correlation","text":"correlation(ts::CorrelationTermstructure, alias1::String, alias2::String)\n\nReturn a scalar instantaneous correlation.\n\n\n\n\n\ncorrelation(ts::CorrelationTermstructure, aliases::AbstractVector{String})\n\nReturn a symmetric matrix of instantaneous correlations.\n\n\n\n\n\ncorrelation(ts::CorrelationTermstructure, aliases1::AbstractVector{String}, aliases2::AbstractVector{String})\n\nReturn a matrix of instantaneous correlations, each element of aliases1 versus each element of aliases2. The size of the resulting matrix is (length(aliases1), length(aliases2)).\n\n\n\n\n\ncorrelation(ts::CorrelationTermstructure, alias1::String, aliases2::AbstractVector{String})\n\nReturn an (1,N) matrix of instantaneous correlations.\n\n\n\n\n\ncorrelation(ts::CorrelationTermstructure, aliases1::AbstractVector{String}, alias2::String)\n\nReturn an (N, 1) matrix of instantaneous correlations.\n\n\n\n\n\ncorrelation(ch::CorrelationHolder, alias1::String, alias2::String)\n\nReturn a scalar instantaneous correlation.\n\n\n\n\n\ncorrelation(ch::CorrelationHolder, aliases1::AbstractVector{String}, aliases2::AbstractVector{String})\n\nReturn a matrix of instantaneous correlations, each element of aliases1 versus each element  of aliases2. The size of the resulting matrix is (length(aliases1), length(aliases2)).\n\n\n\n\n\ncorrelation(ch::CorrelationHolder, aliases::AbstractVector{String})\n\nReturn a symmetric matrix of instantaneous correlations.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.discount","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.discount","page":"Term Structures","title":"DiffFusion.discount","text":"discount(ts::YieldTermstructure, t::ModelTime)\n\nReturn the discount factor with observation time t.\n\n\n\n\n\ndiscount(ts::FlatForward, t::ModelTime)\n\nCalculate discount factor.\n\n\n\n\n\ndiscount(ts::ZeroCurve, t::ModelTime)\n\nCalculate discount factor.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.value","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.value-3","page":"Term Structures","title":"DiffFusion.value","text":"value(ts::ParameterTermstructure, result_size::TermstructureResultSize = TermstructureVector)\n\nReturn a value for constant/time-homogeneous parameters.\n\n\n\n\n\nvalue(ts::ParameterTermstructure, t::ModelTime, result_size::TermstructureResultSize = TermstructureVector)\n\nReturn a value for a given observation time t.\n\n\n\n\n\nvalue(ts::PiecewiseFlatParameter, result_size::TermstructureResultSize = TermstructureVector)\n\nReturn a value for constant/time-homogeneous parameters.\n\n\n\n\n\nvalue(ts::PiecewiseFlatParameter, t::ModelTime, result_size::TermstructureResultSize = TermstructureVector)\n\nReturn a value for a given observation time t.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.volatility","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.volatility-2","page":"Term Structures","title":"DiffFusion.volatility","text":"volatility(ts::VolatilityTermstructure, t::ModelTime, result_size::TermstructureResultSize = TermstructureVector)\n\nReturn a volatility for a given observation time t.\n\n\n\n\n\nvolatility(ts::VolatilityTermstructure, t::ModelTime, x::ModelValue)\n\nReturn a scalar volatility for a given observation time t and underlying or strike value x.\n\n\n\n\n\nvolatility(ts::BackwardFlatVolatility, t::ModelTime, result_size::TermstructureResultSize = TermstructureVector)\n\nReturn a vector of volatilities for a given observation time t.\n\n\n\n\n\n","category":"function"},{"location":"termstructures/termstructures/","page":"Term Structures","title":"Term Structures","text":"DiffFusion.survival","category":"page"},{"location":"termstructures/termstructures/#DiffFusion.survival","page":"Term Structures","title":"DiffFusion.survival","text":"survival(ts::CreditDefaultTermstructure, t::ModelTime)\n\nReturn the survival probability with observation time t.\n\n\n\n\n\n","category":"function"},{"location":"utils/utils/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"utils/utils/","page":"Utilities","title":"Utilities","text":"In this section we document commonly used utility structures methods.","category":"page"},{"location":"utils/utils/#Interpolation-Methods","page":"Utilities","title":"Interpolation Methods","text":"","category":"section"},{"location":"utils/utils/","page":"Utilities","title":"Utilities","text":"DiffFusion.interpolation_methods","category":"page"},{"location":"utils/utils/#DiffFusion.interpolation_methods","page":"Utilities","title":"DiffFusion.interpolation_methods","text":"const interpolation_methods = Dict{String, Function}(...)\n\nSpecify names for available interpolation methods.\n\nDictionary values are constructors with signature (x,y) -> interpolation\n\nAvailable interpolation strings (i.e. keys) are\n\nLINEAR,\nCUBIC,\nAKIMA,\nFRITSCHCARLSON,\nSTEFFEN.\n\nSee package Interpolations for details.\n\n\n\n\n\n","category":"constant"},{"location":"pages/additional_functions/#Additional-Functions","page":"Additional Functions","title":"Additional Functions","text":"","category":"section"},{"location":"pages/additional_functions/","page":"Additional Functions","title":"Additional Functions","text":"In this section we document additional functions.","category":"page"},{"location":"pages/additional_functions/","page":"Additional Functions","title":"Additional Functions","text":"DiffFusion.alias","category":"page"},{"location":"pages/additional_functions/#DiffFusion.alias","page":"Additional Functions","title":"DiffFusion.alias","text":"alias(ts::Termstructure)\n\nReturn the term structure's alias.\n\n\n\n\n\n","category":"function"},{"location":"pages/additional_functions/#Aliases-for-Common-Abstract-Data-Types","page":"Additional Functions","title":"Aliases for Common Abstract Data Types","text":"","category":"section"},{"location":"pages/additional_functions/","page":"Additional Functions","title":"Additional Functions","text":"DiffFusion.ModelTime","category":"page"},{"location":"pages/additional_functions/#DiffFusion.ModelTime","page":"Additional Functions","title":"DiffFusion.ModelTime","text":"A type alias for variables representing time.\n\n\n\n\n\n","category":"type"},{"location":"pages/additional_functions/","page":"Additional Functions","title":"Additional Functions","text":"DiffFusion.ModelValue","category":"page"},{"location":"pages/additional_functions/#DiffFusion.ModelValue","page":"Additional Functions","title":"DiffFusion.ModelValue","text":"A type alias for variables representing modelled quantities.\n\n\n\n\n\n","category":"type"},{"location":"products/products/#Products","page":"Products","title":"Products","text":"","category":"section"},{"location":"products/products/","page":"Products","title":"Products","text":"In this section we document product objects and methods.","category":"page"},{"location":"pages/function_index/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"pages/function_index/","page":"Index","title":"Index","text":"","category":"page"},{"location":"#DiffFusion.jl-[F]","page":"DiffFusion.jl [∂F]","title":"DiffFusion.jl [∂F]","text":"","category":"section"},{"location":"","page":"DiffFusion.jl [∂F]","title":"DiffFusion.jl [∂F]","text":"Documentation for DiffFusion.jl","category":"page"},{"location":"","page":"DiffFusion.jl [∂F]","title":"DiffFusion.jl [∂F]","text":"The DiffFusion.jl package implements a framework for joint simulation of financial risk factors, risk-neutral valuation of financial instruments and calculation of portfolio risk measures.","category":"page"},{"location":"","page":"DiffFusion.jl [∂F]","title":"DiffFusion.jl [∂F]","text":"The intended purpose of the package is efficient exposure simulation for XVA and Counterparty Credit Risk (CCR).","category":"page"},{"location":"#Repository","page":"DiffFusion.jl [∂F]","title":"Repository","text":"","category":"section"},{"location":"","page":"DiffFusion.jl [∂F]","title":"DiffFusion.jl [∂F]","text":"The code for DiffFusion.jl is hosted at github.com/frame-consulting/DiffFusion.jl.","category":"page"},{"location":"#Installation","page":"DiffFusion.jl [∂F]","title":"Installation","text":"","category":"section"},{"location":"","page":"DiffFusion.jl [∂F]","title":"DiffFusion.jl [∂F]","text":"The package can be obtained as source code directly via","category":"page"},{"location":"","page":"DiffFusion.jl [∂F]","title":"DiffFusion.jl [∂F]","text":"git clone https://github.com/frame-consulting/DiffFusion.jl","category":"page"},{"location":"","page":"DiffFusion.jl [∂F]","title":"DiffFusion.jl [∂F]","text":"This package is in development stage. For details on the intended functionality, see the Overview page.","category":"page"},{"location":"","page":"DiffFusion.jl [∂F]","title":"DiffFusion.jl [∂F]","text":"For questions please contact info@frame-consult.de.","category":"page"}]
}
